@{
    ViewBag.Title = "Work Overview";
    ViewBag.Icon = "list-ul";

    List<Work> works = new List<Work>();
    List<Skd.Web.DbDropdown> templateTitles = new List<Skd.Web.DbDropdown>();
    using (var dbConn = new Db())
    {
        works = dbConn.Work
            .Include("WorkTask")
            .Include("WorkTask.WorkTaskType")
            .Where(x => x.createUserId == Common.User.userId && x.status != 250 && !x.archiveDateTime.HasValue)
            .OrderBy(x => x.startDateTime)
            .ToList();
        works.AddRange(dbConn.Work
             .Include("WorkTask")
             .Include("WorkTask.WorkTaskType")
             .Where(x => x.createUserId == Common.User.userId && x.status == 250 && !x.archiveDateTime.HasValue)
             .OrderByDescending(x => x.startDateTime)
             );
        templateTitles = dbConn.WorkTaskTemplate.OrderBy(x => x.templateId).Select(x => x.templateId).Distinct().ToList().Select(x => new DbDropdown(x, x)).ToList();
    }
}
<form id="frm" action="/Work/Create" method="post" novalidate="novalidate">
    @Html.AntiForgeryToken()
    <input type="hidden" id="rUrl" name="rUrl" value="Drive" />
    @Form.Controls.DateTime(new Form.DateTime() { Id = "startDateTime", DateTimeType = Form.DateTimeType.DateTime, ControlOnly = true })
    @Form.Controls.DateTime(new Form.DateTime() { Id = "endDateTime", DateTimeType = Form.DateTimeType.DateTime, ControlOnly = true })
    @Form.Controls.Text(new Form.Text() { Id = "remark", Title = "Remark", ControlOnly = true })
    @Form.Controls.Dropdown(new Form.Dropdown() { Id = "templateId", HelpText = "-- Choose Template --", DataList = templateTitles, UseGrouping = false, ControlOnly = true })
    <span id="submit_container" class="skd-form-row" data-org-value="" control-type="form-text-text">
        <div class="col px-0">
            @Form.Controls.ButtonSubmit(new Form.ButtonSubmit() { Id = "btnSubmit", IdName = "cmd", Value = "create", Title = "Create Work", ControlOnly = true })

            @Form.Controls.ButtonSubmit(new Form.ButtonSubmit() { Id = "btnSubmitStay", IdName = "cmd", Value = "create", Title = "Create Work and Stay", ControlOnly = true })
        </div>
    </span>
</form>
<table class="table table-striped table-hover">
    <thead>
        <tr>
            <th></th>
            <th>Id</th>
            <th>Start</th>
            <th>End</th>
            <th>Remark</th>
            <th colspan="3"></th>
        </tr>
    </thead>
    <tbody>
        @{
            int? oldStatus = null;
            string rowClass = "";
        }
        @foreach (var work in works)
        {
            if (oldStatus != work.status)
            {
                rowClass = " new-status";
            }
            else
            {
                rowClass = "";
            }
            if (work.status == 250)
            {
                //rowClass += " d-none d-sm-flex";
            }
            var realStartDT = work.startDateTime ?? DateTime.MinValue;
            var realEndDT = work.endDateTime ?? DateTime.MinValue;
            <tr class="@rowClass.Trim()" data-status="@work.status" data-id="@work.workId">
                <td class="w-0">
                    @Skd.Web.Form.Controls.Button(new Form.Button() { Background = Skd.Web.Enumeration.BootstrapStyle.Warning, Icon = Icon.Truck, ControllerAttributes = new { skd_cmd = "drive" }, BuildHtml = true @*work.status != 250*@ })
                </td>
                <td class="workId"><a href="Work/Edit/@work.workId" title="@work.workId">@work.workId</a></td>
                <td class="w-0" style="line-height: 1;">
                    @work.startDateTime
                    @if (work.WorkTask.Count(x => x.startDateTime.HasValue) > 0)
                    {
                        <br /><div class="text-success" style="font-size: .8rem">@work.WorkTask.Min(x => x.startDateTime)</div>
                    }
                </td>
                <td class="w-0" style="line-height: 1;">
                    @work.endDateTime
                    @if (work.WorkTask.Count(x => x.endDateTime.HasValue) > 0)
                    {
                        <br /><div class="text-danger text-end" style="font-size: .8rem">@work.WorkTask.Max(x => x.endDateTime)</div>
                    }
                </td>
                <td class="text-truncate">@work.remark</td>
                <td class="w-0">
                    @(work.startDateTime.HasValue && work.endDateTime.HasValue ? (work.endDateTime.Value - work.startDateTime.Value).ToString() : "")
                </td>
                <td class="w-0">
                    @if (work.status == 250)
                    {
                        using (var ctx = new Db())
                        {
                            <span>@string.Format(new System.Globalization.CultureInfo("da-DK", false), "{0:C}", ctx.fnc_Work_Salary(work.workId.ToString(), null, null, Work.rate0618, Work.rate1823, Work.rate2306).First().salary)</span>
                        }
                    }
                </td>
                <td class="w-0">
                    <div class="btn-group">
                        @Skd.Web.Form.Controls.ButtonConfirm(new Form.ButtonConfirm() { Title = "Finish", CallbackAfterConfirmation = "finishWork('" + work.workId + "')", Background = Enumeration.BootstrapStyle.Success, BuildHtml = (work.status != 250 && work.WorkTask.Count(x => !x.isFinished.Value) == 0) })
                        @Skd.Web.Form.Controls.Button(new Form.Button() { Title = "Report", Icon = Icon.File.PDF, Background = Skd.Web.Enumeration.BootstrapStyle.Info, ControllerAttributes = new { skd_cmd = "report", data_work_id = work.workId } })
                        @Skd.Web.Form.Controls.ButtonConfirm(new Form.ButtonConfirm() { Title = "Archive", CallbackAfterConfirmation = "archiveWork('" + work.workId + "')", Icon = Icon.Archive, Background = Skd.Web.Enumeration.BootstrapStyle.Dark, BuildHtml = work.status == 250 })
                        @Skd.Web.Form.Controls.ButtonConfirm(new Form.ButtonConfirm() { Title = "Delete", Icon = Icon.DeleteFull, Background = Skd.Web.Enumeration.BootstrapStyle.Danger, CallbackAfterConfirmation = "deleteWork('" + work.workId + "')", BuildHtml = work.status != 250 })
                    </div>
                </td>
            </tr>
            oldStatus = work.status;
        }
    </tbody>
</table>
@section scripts {
    <script>
        $(function (e) {
            $("#frm #templateId").on("change", function (e) {
                switch ($(this).val().toUpperCase()) {
                    case "LEMAN GT LINK":
                        $("#frm #startDateTime").val("@DateTime.Now.ToYMD() 16:45");
                        $("#frm #startDateTime_datetime").val("@DateTime.Now.ToYMD()\T16:45");
                        $("#frm #endDateTime").val("@DateTime.Now.AddDays(1).ToYMD() 01:15");
                        $("#frm #endDateTime_datetime").val("@DateTime.Now.AddDays(1).ToYMD()\T01:15");
                        break;
                    case "LEMAN GT TRAILER":
                        $("#frm #startDateTime").val("@DateTime.Now.ToYMD() 16:55");
                        $("#frm #startDateTime_datetime").val("@DateTime.Now.ToYMD()\T16:55");
                        $("#frm #endDateTime").val("@DateTime.Now.AddDays(1).ToYMD() 00:30");
                        $("#frm #endDateTime_datetime").val("@DateTime.Now.AddDays(1).ToYMD()\T00:30");
                    case "LEMAN GT LINK TJW PICKUP":
                        $("#frm #startDateTime").val("@DateTime.Now.ToYMD() 16:00");
                        $("#frm #startDateTime_datetime").val("@DateTime.Now.ToYMD()\T16:00");
                        $("#frm #endDateTime").val("@DateTime.Now.AddDays(1).ToYMD() 01:15");
                        $("#frm #endDateTime_datetime").val("@DateTime.Now.AddDays(1).ToYMD()\T01:15");
                        break;
                    case "LEMAN GT LINK JW SETDOWN":
                        $("#frm #startDateTime").val("@DateTime.Now.ToYMD() 16:45");
                        $("#frm #startDateTime_datetime").val("@DateTime.Now.ToYMD()\T16:45");
                        $("#frm #endDateTime").val("@DateTime.Now.AddDays(1).ToYMD() 01:30");
                        $("#frm #endDateTime_datetime").val("@DateTime.Now.AddDays(1).ToYMD()\T01:30");
                        break;
                }
            });
            $("#frm #btnSubmitStay").on("click", function (e) {
                $("#frm #rUrl").val("");
            })
            $("#frm").on("submit", function (e) {

            });

            $("[skd-cmd]").on("click", function (e) {
                let cmd = $(this).attr("skd-cmd").toUpperCase();
                let workId = $(this).closest("tr").attr("data-id");

                switch (cmd) {
                    case "DRIVE":
                        Skd.PageLoading("Getting workday...");
                        location.href = "/Work/Drive/" + workId;
                        break;
                    case "REPORT":
                        Skd.PageLoading("Getting report page...");
                        location.href = "/Work/ReportWork/" + $(this).attr("data-work-id");
                        break;
                }
            });
        });
        function deleteWork(workId) {
            Skd.PageLoading("Deleting workday...");
            location.href = "/Work/Delete?workId=" + workId;
        }
        function finishWork(workId) {
            Skd.PageLoading("Finishing workday...");
            location.href = "/Work/Finish?workId=" + workId;
        }
        function archiveWork(workId) {
            alert("NOT IMPLEMENTED");
            /*
            Skd.PageLoading("Finishing workday...");
            location.href = "/Work/Finish?workId=" + workId;
            */
        }
    </script>
}
@section styles {
    <style>
        .w-0 {
            /* HACK make TD => .col-auto */
            width: 0;
        }

        table {
        }

            table tr {
                white-space: nowrap;
            }

                table tr.new-status {
                    border-top: 5px solid #f00;
                }

                table tr .workId {
                    max-width: 100px;
                    overflow: hidden;
                    text-overflow: ellipsis;
                    white-space: nowrap;
                }

                table tr td {
                    vertical-align: middle;
                }

        [data-status='250'] {
        }
    </style>
}