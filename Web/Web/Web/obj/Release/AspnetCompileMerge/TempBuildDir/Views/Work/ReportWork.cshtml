@model Work
@{
    ViewBag.Title = "Work Report" + (Model == null ? "s" : "");
    string plate1 = "";
    string plate2 = "";
    string plate3 = "";
    string plate4 = "";
}
<div class="top-message alert alert-warning">
    <div class="d-flex align-items-center flex-column flex-md-row">
        <div class="col-auto">
            @Form.Controls.Button(new Form.Button() { Id = "btn_print", Background = Skd.Web.Enumeration.BootstrapStyle.Dark, Icon = Icon.Print })
        </div>
    </div>
</div>
@if (Model == null)
{
    DateTime weekStart = new DateTime(2022, 04, 04);
    weekStart = new DateTime(2022, 04, 11);
    DateTime weekEnd = weekStart.AddDays(7);
    List<WorkTask> weekly;
    using (var db = new Db())
    {
        weekly = db.WorkTask
            .Include("Work")
            .Where(x =>
                x.Work.startDateTime > weekStart
                && x.Work.endDateTime < weekEnd
                && x.Work.remark.Contains("Leman GT")
            )
            .ToList();
    }
    List<string> remarks = new List<string>();
    var workIds = weekly.OrderBy(x => x.startDateTime).Select(x => new { x.Work.workId, x.Work.startDateTime }).Distinct();
    var rowNo = 0;
    var rowPos = new[] { 8.4, 10.8, 13.2, 15.5, 17.8 };

    <img src="~/Content/Report/leman_template.jpg" style="width: 29.7cm; position: absolute; top: -1cm; left: 4.5cm;" />
    foreach (var work in workIds.OrderBy(x => x.startDateTime))
    {
        double posTop = 3.2 + (rowNo * 0.85);
        <div class="d-flex flex-row" style="position: absolute; top: @(posTop.ToString() + "cm"); left: 5.5cm;">
            <div class="d-none col" style="position: absolute; left: 1.5cm; ">@weekly.First(x => x.workId == work.workId).Work.startDateTime.Value.ToString("dddd")</div>
            <div class="col-auto" style="position: absolute; left: 5.5cm">@weekly.First(x => x.workId == work.workId).Work.startDateTime.Value.ToString("dd")</div>
            <div class="col-auto" style="position: absolute; left: 6.8cm">@weekly.First(x => x.workId == work.workId).Work.startDateTime.Value.ToString("MM")</div>

            @foreach (var task in weekly.Where(x => x.workId == work.workId && x.reportColumnNumber > 0))
            {
                double posLeft = (((task.reportColumnNumber - 1) * 2.15) + 8.9);
                DateTime dateTime = task.startDateTime.HasValue ? task.startDateTime.Value : task.endDateTime.Value;
                <div class="col-auto" style="position: absolute; left: @(rowPos[task.reportColumnNumber - 1].ToString() + "cm")">@Html.Raw(dateTime.ToString("HH") + "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" + dateTime.ToString("mm"))</div>
            }

            <div class="col-auto" style="position: absolute; left: 20.5cm">@(weekly.Count(x => x.workId == work.workId && x.typeId == (int)WorkTaskTypeEnum.PickupLink) > 0 ? "YES" : "NO")</div>
        </div>
        rowNo++;
    }
    <div class="col-auto" style="position: absolute; top: 13cm; left: 6cm;">
        <u>REMARKS</u> (Message to Office/Carrier):
        @foreach (var task in weekly.Where(x => new[] { (int)WorkTaskTypeEnum.Note, (int)WorkTaskTypeEnum.Accident }.Contains(x.typeId)).OrderBy(x => x.Work.startDateTime).ThenBy(y => y.startDateTime))
        {
            <br /><br />@task.startDateTime.Value.ToString("d/M HH:mm")@:&nbsp;&nbsp;&nbsp;&nbsp;@task.remark
        }
    </div>
}
else
{
    <div id="driveTable" class="skd-content-loader-show">
        <img class="skd-content-loader" src="~/Content/Images/loader-circle.gif" />
        <div class="d-flex flex-row flex-wrap align-items-center p-2" style="border-bottom: 3px solid var(--bs-danger);">
            <div class="col-6"><b>Stig John Kagan-Ditlevsen</b></div>
            <div class="col-6 pe-0 text-end"><b>Workday start @Model.startDateTime.Value.ToString("\\d. d. MMMM yyyy HH:mm")</b></div>
            <div class="col-6">@Model.remark</div>
            <div class="col-6 text-end"><b>Workday end @Model.endDateTime.Value.ToString("\\d. d. MMMM yyyy HH:mm")</b></div>
        </div>
        @foreach (var row in Model.WorkTask.OrderBy(x => x.sortOrder).ThenBy(x => x.startDateTime))
        {
            <div id="@row.taskId" class="d-flex flex-row align-items-center px-2 py-1 shade">
                <div style="width: 155px;">
                    <span class="fas @row.WorkTaskType.IconNoFormat() fa-fw"></span>
                    @row.WorkTaskType.internalTitle
                </div>
                <div class="col">
                    @if (new[] { (int)WorkTaskTypeEnum.Arrivial }.Contains(row.typeId))
                    {
                        if (int.TryParse(row.addressText, out int addressId))
                        {
                            var tmpAddress = Common.WorkAddresses.Single(x => x.addressId == addressId);
                            <span class="address">@@ @tmpAddress.Address()</span>
                        }
                        else
                        {
                            if (string.IsNullOrEmpty(row.addressText))
                            {
                                <span class="address"><span class="fas fa-exclamation-triangle text-danger"></span> * ADDRESS MISSING *</span>
                            }
                            else
                            {
                                <span class="address">@@ @row.addressText.Trim()</span>
                            }
                        }
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.PickupSemi }.Contains(row.typeId))
                    {
                        plate1 = WorkVehicle.GetNumberplate(row.vehicleNumberplate);
                        <span>Numberplate: <u>@plate1</u></span>
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.PickupLink }.Contains(row.typeId))
                    {
                        plate2 = WorkVehicle.GetNumberplate(row.linkNumberplate);
                        <span>Numberplate: <u>@plate2</u></span>
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.PickupDolly }.Contains(row.typeId))
                    {
                        plate3 = WorkVehicle.GetNumberplate(row.dollyNumberplate);
                        <span>Numberplate: <u>@plate3</u></span>
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.PickupTrailer }.Contains(row.typeId))
                    {
                        plate4 = WorkVehicle.GetNumberplate(row.trailerNumberplate);
                        <span>Numberplate: <u>@plate4</u></span>
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.ParkSemi }.Contains(row.typeId))
                    {
                        <span>Numberplate: <u>@plate1</u></span>
                        plate1 = "";
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.ParkLink }.Contains(row.typeId))
                    {
                        <span>Numberplate: <u>@plate2</u></span>
                        plate2 = "";
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.ParkDolly }.Contains(row.typeId))
                    {
                        <span>Numberplate: <u>@plate3</u></span>
                        plate3 = "";
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.ParkTrailer }.Contains(row.typeId))
                    {
                        <span>Numberplate: <u>@plate4</u></span>
                        plate4 = "";
                    }
                    else if (new[] { (int)WorkTaskTypeEnum.ConnectTrailer, (int)WorkTaskTypeEnum.DisconnectTrailer }.Contains(row.typeId))
                    {
                        <span>Numberplate: <u>@plate4</u></span>
                    }
                    @if (!string.IsNullOrEmpty(row.remark))
                    {
                        <span class="fas @Skd.Web.Icon.Remark"></span> @row.remark
                    }
                </div>
                <div class="pe-1 text-end" style="width: 55px;">@(row.startDateTime.HasValue ? row.startDateTime.Value.ToHM() : "")</div>
                <div class="pe-1 text-end" style="width: 55px;">@(row.endDateTime.HasValue ? row.endDateTime.Value.ToHM() : "")</div>
                <div class="pe-0 text-end" style="width: 55px;">@(row.startDateTime.HasValue && row.endDateTime.HasValue ? Html.Raw(DateTime.Parse((row.endDateTime.Value - row.startDateTime.Value).ToString()).ToHM() + "&#916;") : Html.Raw(""))</div>
            </div>
        }
    </div>
}
@section scripts {
    <script>
        $(function (e) {
        });
    </script>
}
@section styles {
    <style>
        u {
            text-decoration-style: dashed;
            text-decoration-thickness: from-font;
        }
    </style>
}
