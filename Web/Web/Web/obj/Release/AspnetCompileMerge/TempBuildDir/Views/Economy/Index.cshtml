@{
    ViewBag.Title = "Finance Overview";

    List<FinanceAccount> financeAccounts = new List<FinanceAccount>();
    List<Finance> finances = new List<Finance>();
    List<FinanceAccount> financeAccountsAll = new List<FinanceAccount>();
    List<Skd.Web.DbDropdown> shopList = new List<DbDropdown>();

    using (var db = new Db())
    {
        financeAccountsAll = db.FinanceAccount.OrderBy(x => x.accountId).ToList();
        financeAccounts = financeAccountsAll.Where(x => x.sumGroupTitle == "Aktiver").OrderBy(x => x.accountId).ToList();
        finances = db.Finance.Include("FinanceLine").OrderByDescending(x => x.receiptDateTime).Take(10).ToList();
        shopList = (from x in (from x in finances
                               where !string.IsNullOrEmpty(x.shopId)
                               orderby x.shopId
                               select x).ToList()
                    select new DbDropdown(x.shopId, x.shopId)).ToList();
    }
    decimal a = financeAccounts.Sum(x => x.sumActual.Value);
}

<div class="d-flex">
    <div class="col-12 order-2 col-lg-6 order-lg-1">
        @foreach (var row in financeAccounts)
        {
            <div class="d-flex flex-row shade">
                <div class="col-auto">@row.accountId.ToString("0\\.0\\.000")</div>
                <div class="col">@row.title</div>
                <div class="col-2 text-end@(row.sumActual > 0 ? " amount-positive" : row.sumActual < 0 ? " amount-negative" : "")">@row.sumActual.Value.ToString("#,##0.00")</div>
            </div>
        }
        <div class="d-flex flex-row" style="font-weight: bold; border-top: 1px solid black;">
            <div class="col text-end">Sum</div>
            <div class="col-2 text-end@(a > 0 ? " amount-positive" : a < 0 ? " amount-negative" : "")">@a.ToString("#,##0.00")</div>
        </div>
        <div class="d-flex flex-row" style="font-weight: bold; border-top: 1px solid black; border-bottom: 3px double black;">
            <div class="col text-end">With @(DateTime.Now.DaysInCurrentMonth() - DateTime.Now.Day) days left in month, it amounts per day</div>
            <div class="col-2 text-end@(a > 0 ? " amount-positive" : a < 0 ? " amount-negative" : "")">@((a/(DateTime.Now.DaysInCurrentMonth() - DateTime.Now.Day)).ToString("#,##0.00"))</div>
        </div>
        <hr />
        @foreach (var row in finances)
        {
            <div class="d-flex flex-row shade">
                <div class="col-auto pe-1"><span class="fas fa-edit" skd-url="/Economy/Finance/@row.financeId" skd-message="Getting finance details"></span></div>
                <div class="col-auto ps-0">@row.receiptDateTime.ToString("dd/MM HH:mm")</div>
                <div class="col text-truncate">
                    @(!string.IsNullOrEmpty(row.title) ? row.title : !string.IsNullOrEmpty(row.FinanceLine.First().title) ? row.FinanceLine.First().title : "* UNKNOWN *")
                </div>
                <div class="col-2 text-truncate">@(!string.IsNullOrEmpty(row.shopId) ? row.shopId : "")</div>
                <div class="col-2 text-end@(row.receiptSum > 0 ? " amount-positive" : row.receiptSum < 0 ? " amount-negative" : "")">@row.receiptSum.ToString("#,##0.00")</div>
            </div>
        }
    </div>
    <div class="col-12 mb-3 order-lg-1 col-lg-6 order-lg-2 mb-lg-0">
        <form id="frm" action="" novalidate>
            @Form.Controls.DateTime(new Form.DateTime() { Id = "receiptDateTime", Title = "Receipt Date/Time", DateTimeType = Form.DateTimeType.DateTime, Required = true })
            @Form.Controls.Dropdown(new Form.Dropdown() { Id = "counterAccountId", Title = "Account", HelpText = "-- choose account --", DataList = financeAccounts.Select(x => new DbDropdown(x.accountId, x.title)).ToList(), Required = true })
            @Form.Controls.Text(new Form.Text() { Id = "title", Title = "Title" })
            @Form.Controls.Dropdown(new Form.Dropdown() { Id = "shopId", Title = "Shop name", SelectOnly = false, DataList = shopList })
            @Form.Controls.Text(new Form.Text() { Id = "receiptId", Title = "Receipt Id" })
            @Form.Controls.TextBox(new Form.TextBox() { Id = "remark", Title = "Remark" })
        </form>
        <hr />
        <div class="d-flex flex-row">
            <div class="col">@Form.Controls.Text(new Form.Text() { Id = "line_title", Title = "Title", ControlOnly = true })</div>
            <div class="col">@Form.Controls.Dropdown(new Form.Dropdown() { Id = "line_accountId", Title = "Account", HelpText = "-- choose account --", DataList = financeAccountsAll.OrderBy(x => x.accountId).Select(x => new DbDropdown(x.accountId, x.C_title.Replace("     ", "&emsp;"))).ToList(), ControlOnly = true })</div>
            <div class="col">@Form.Controls.Text(new Form.Text() { Id = "line_amount", Title = "Amount", InputType = Form.TextInputType.Number, InputMode = Form.TextInputMode.Decimal, ControlOnly = true })</div>
            <div class="col-auto">@Form.Controls.Button(new Form.Button() { Id = "btn_lineAdd", Title = "Add", Icon = Icon.Add })</div>
        </div>
        <div class="d-flex flex-row" style="font-weight: bold; border-bottom: 1px solid black;">
            <div class="col-5">Title</div>
            <div class="col-5">Account</div>
            <div class="col-2 text-end">Amount</div>
        </div>
        <div id="lines">

        </div>
        <div>
            <div class="d-flex flex-row" style="font-weight: bold; border-top: 1px solid black;">
                <div class="col-5"></div>
                <div class="col-5 text-end">Sum</div>
                <div id="lines_sum" class="col-2 text-end" style="border-bottom: 3px double black;">0.00</div>
            </div>
        </div>
        <div id="lines_template" style="display: none !important;">
            <div class="d-flex flex-row">
                <div class="col-5">*title*</div>
                <div class="col-5">*accountTitle*</div>
                <div class="col-2 text-end">*amount*</div>
            </div>
        </div>
    </div>
</div>

@section scripts {
    <script>
        class FinanceLine {
            title = "";
            accountId = 0;
            accountTitle = "";
            amount = 0.0;
        }
        var lines = [];

        $(function (e) {
            $("#btn_lineAdd").on("click", function (e) {
                $("#line_accountId, #line_amount").removeClass("is-invalid");
                if ($("#line_accountId").val() === "") {
                    $("#line_accountId").addClass("is-invalid").focus();
                    return;
                }
                if ($("#line_amount").val() === "") {
                    $("#line_amount").addClass("is-invalid").focus();
                    return;
                }

                let fl = new FinanceLine();
                fl.title = $("#line_title").val();
                fl.accountId = $("#line_accountId").val();
                fl.accountTitle = $("#line_accountId_text").val();
                fl.accountTitle = fl.accountTitle.substring(fl.accountTitle.indexOf("- ") + 2);
                fl.amount = $("#line_amount").val();
                lines.push(fl);

                // reset inut
                $("#line_title").val("");
                $("#line_accountId").val("");
                $("#line_amount").val("");

                // repaint lines
                $("#lines").html("");

                let sum = 0;
                lines.forEach(function (value, index, arr) {
                    value = Object.assign(FinanceLine.prototype, value);
                    let elm = $("#lines_template").clone();
                    elm = elm.html()
                        .replace("*title*", value.title)
                        .replace("*accountTitle*", value.accountTitle)
                        .replace("*amount*", numberWithCommas(value.amount));

                    $("#lines").append(elm);
                    sum += Number(value.amount);
                });
                $("#lines_sum").html(numberWithCommas(sum));

                console.clear();
                console.warn(lines);
            });

            $("span.fas[skd-url], button.fas[skd-url]").on("click", function (e) {
                let message = $(this).attr("skd-message");
                if (message === "") {
                    message = "Loading page...";
                }
                Skd.PageLoading(message);
                location.href = $(this).attr("skd-url");
            });
        });

        function numberWithCommas(x) {
            return Math.floor(x) + "." + (Math.round((x % 1) * 100 + Number.EPSILON) + "00").substring(0, 2);
        }
    </script>
}
@section styles {
    <style>
        .amount-positive {
            color: var(--bs-success);
        }

        .amount-negative {
            color: var(--bs-danger);
        }

        span.fas[skd-url]:hover {
            cursor: pointer;
            color: var(--bs-success);
        }

        @@media only screen and (max-width: 576px) {
            .skd-form-row label {
                width: calc(100% - .5rem);
                margin-left: .5rem;
                padding-bottom: 0;
            }
        }
    </style>
}
