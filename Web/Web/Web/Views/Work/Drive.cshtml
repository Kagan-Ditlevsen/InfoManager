@model Work
@{
    ViewBag.Title = "Drive";

    string plate1 = "";
    string plate2 = "";
    string plate3 = "";
    string plate4 = "";
    string add = "";
    WorkTask curTask;
    Guid curTaskId = Guid.Empty;
    int curSortOrder = 0;
    int curTypeId = 0;
    bool assumedFinished = Model.WorkTask.Count(x => !x.isFinished.Value) == 0;
    if (Model.WorkTask.Count > 0 && Model.status != 250)
    {
        curTask = Model.WorkTask.Where(x => !x.isFinished.Value).OrderBy(x => x.sortOrder).FirstOrDefault();
        if (curTask != null)
        {
            curTaskId = curTask.taskId;
            curTypeId = curTask.typeId;
            curSortOrder = curTask.sortOrder;
        }
    }
}
<div id="topRow" class="d-flex flex-row align-items-center bg-light text-dark p-1">
    <div class="col-auto pe-0">
    </div>
    <div class="col text-truncate" style="font-size: .75rem; line-height: 1.4;">
        <b>@Model.remark</b><br />
        @Model.startDateTime @Model.endDateTime
    </div>
    <div class="col-auto ps-0 text-end text-nowrap" style="font-size: .75rem; line-height: 1.4;">
        @HttpContext.Current.Application["systemVersion"]<br />@HttpContext.Current.Application["systemDateTime"]
    </div>
    <div class="col-auto">
        <div class="dropdown d-inline">
            <button class="btn btn-sm btn-warning w-100 dropdown-toggle" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false" style="min-width: 0;">
                Add
            </button>
            <div class="dropdown-menu pt-0" aria-labelledby="dropdownMenu2" style="min-width: 375px;">
                <div class="d-flex flex-row">
                    <div class="col-auto">
                        @foreach (var type in Common.WorkTaskTypes.Where(x => new[] { (int)WorkTaskTypeEnum.Arrivial, (int)WorkTaskTypeEnum.Departure }.Contains(x.typeId)))
                        {
                            <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@Model.workId&sortOrder=0&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                        }
                    </div>
                    <div class="col-auto">
                        @foreach (var type in Common.WorkTaskTypes.Where(x => new[] { (int)WorkTaskTypeEnum.PickupGoods, (int)WorkTaskTypeEnum.DeliverGoods }.Contains(x.typeId)))
                        {
                            <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@Model.workId&sortOrder=0&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                        }
                    </div>
                </div>
                <div><hr class="dropdown-divider"></div>
                <div class="d-flex flex-row">
                    <div class="col-auto">
                        @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId >= 201 && x.typeId <= 249))
                        {
                            <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@Model.workId&sortOrder=0&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                        }
                    </div>
                    <div class="col-auto">
                        @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId >= 251 && x.typeId <= 299))
                        {
                            <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@Model.workId&sortOrder=0&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                        }
                    </div>
                </div>
                <div><hr class="dropdown-divider"></div>
                <div class="d-flex flex-row">
                    <div class="col-auto">
                        @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId >= 300 && x.typeId <= 399))
                        {
                            <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@Model.workId&sortOrder=0&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                        }
                    </div>
                    <div class="col-auto">
                        @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId >= 400 && x.typeId <= 499))
                        {
                            <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@Model.workId&sortOrder=0&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<div id="bottomRow" class="d-flex flex-column flex-sm-row align-items-center bg-light fixed-bottom p-1">
    <div class="col-12 col-sm mt-0">
        @Form.Controls.Button(new Form.Button() { Title = "", Icon = "fa-home", HelpText = "Goto frontpage", ClickEvent = "Skd.PageLoading('Goto homepage'); location.href='/';", Background = Skd.Web.Enumeration.BootstrapStyle.Dark })
        @Form.Controls.Button(new Form.Button() { Title = "", Icon = "arrow-alt-circle-left", HelpText = "Goto overview", ClickEvent = "Skd.PageLoading('Getting overview', 0); location.href='/Work';", Background = Skd.Web.Enumeration.BootstrapStyle.Dark })
        @Form.Controls.Button(new Form.Button() { Title = "", ClickEvent = "Skd.PageLoading('Refreshing', 0); location.href='/Work/Drive/" + Model.workId + "';", Background = Skd.Web.Enumeration.BootstrapStyle.Dark, Icon = "sync" })
        @Form.Controls.Button(new Form.Button() { Title = "", ClickEvent = "addEvent(" + WorkTaskTypeEnum.Accident + ")", Background = Skd.Web.Enumeration.BootstrapStyle.Warning, Icon = WorkTaskType.FromEnum(WorkTaskTypeEnum.Accident).IconNoFormat(), Disabled = (!string.IsNullOrEmpty(add) || curTypeId != (int)WorkTaskTypeEnum.Arrivial), ControllerClass = "bottom-action" })
        @Form.Controls.Button(new Form.Button() { Title = "", ClickEvent = "addEvent(" + WorkTaskType.FromEnum(WorkTaskTypeEnum.Note).typeId + ", " + (curSortOrder + 5) + ")", Background = Skd.Web.Enumeration.BootstrapStyle.Secondary, Icon = WorkTaskType.FromEnum(WorkTaskTypeEnum.Note).IconNoFormat(), ControllerClass = "bottom-action" })
    </div>
    <div class="col-12 mt-1 col-sm-auto mt-sm-0">
        @Form.Controls.Button(new Form.Button() { Title = "", ClickEvent = "addDaily(9503, 57, '', null,'Cigaret')", Background = Skd.Web.Enumeration.BootstrapStyle.Primary, Icon = "fa-smoking" })
        @Form.Controls.Button(new Form.Button() { Title = "", ClickEvent = "addDaily(2000, 50, 'Working/Driving...', '20,75', 'Coffee (75ml.)')", Background = Skd.Web.Enumeration.BootstrapStyle.Primary, Icon = "fa-mug-hot" })
        @Form.Controls.Button(new Form.Button() { Title = "", ClickEvent = "addDaily(2000, 52, 'Working/Driving...', '20,500', 'Water (500ml.)');", Background = Skd.Web.Enumeration.BootstrapStyle.Primary, Icon = "fa-water" })
    </div>
</div>
<div id="driveTable" class="skd-content-loader-show">
    <img class="skd-content-loader" src="~/Content/Images/loader-circle.gif" />
    @if (Model.status == 250)
    {
        <div class="alert alert-warning mb-0" role="alert"><span class="fas fa-exclamation-triangle pe-2"></span>Workday is finished. Please be carefull with changes.</div>
    }
    else if (assumedFinished)
    {
        <div class="alert alert-warning mb-0" role="alert"><span class="fas fa-exclamation-triangle pe-2"></span>Workday is <u>assumed</u> finished. Please be carefull with changes.</div>
    }

    @foreach (var row in Model.WorkTask.OrderBy(x => x.sortOrder).ThenBy(x => x.startDateTime))
    {
        var btnStartText = row.startDateTime.HasValue ? row.startDateTime.Value.ToHM() : row.WorkTaskType.btnStartText;
        var btnEndText = row.endDateTime.HasValue ? row.endDateTime.Value.ToHM() : row.WorkTaskType.btnEndText;

        <div id="@row.taskId" class="task d-flex align-items-center p-2 mt-sm-0 shade @(curTaskId == row.taskId ? "active" : "")" data-sort-order="@row.sortOrder" data-type-id="@row.typeId">
            <div class="d-flex w-100 align-self-baseline order-1 order-sm-2 ps-sm-2">
                <div class="col action">
                    <div class="dropdown d-inline">
                        <button class="btn btn-sm btn-warning w-100 dropdown-toggle" type="button" id="dropdownMenu2" data-bs-toggle="dropdown" aria-expanded="false">
                            <span class="@row.WorkTaskType.icon.Replace("text-", "").Replace("bg-", "")"></span>
                            @row.WorkTaskType.internalTitle
                        </button>
                        <div class="dropdown-menu pt-0" aria-labelledby="dropdownMenu2">
                            <div class="d-flex flex-row flex-wrap p-1 action-status">
                                <div class="col-6 order-1 pe-1 col-sm"><span class="skd-font skd-vehicle-semi fa-flip-horizontal"></span> @WorkVehicle.GetNumberplate(plate1)</div>
                                <div class="col-6 order-2 pe-0 col-sm order-sm-4 pe-sm-1"><span class="skd-font skd-vehicle-link fa-flip-horizontal"></span> @WorkVehicle.GetNumberplate(plate4)</div>
                                <div class="col-6 order-3 pe-1 col-sm order-sm-2 pe-sm-1"><span class="skd-font skd-vehicle-link fa-flip-horizontal"></span> @WorkVehicle.GetNumberplate(plate2)</div>
                                <div class="col-6 order-4 pe-0 col-sm order-sm-3"><span class="skd-font skd-vehicle-trailer fa-flip-horizontal"></span> @WorkVehicle.GetNumberplate(plate3)</div>
                                @if (!string.IsNullOrEmpty(add))
                                {
                                    <div class="col-12 ps-0 pe-0 text-truncate">
                                        @if (int.TryParse(add, out int addressId))
                                        {
                                            var tmpAddress = Common.WorkAddresses.Single(x => x.addressId == addressId);
                                            <span class="pe-1 fas fa-home"></span>@tmpAddress.Address()
                                        }
                                        else
                                        {
                                            <span class="pe-1 fas fa-home"></span>@add
                                        }
                                    </div>
                                }
                            </div>
                            <div class="d-flex flex-row">
                                <div class="col-6">
                                    <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/@row.taskId?sortOrder=@row.sortOrder"><span class="fas fa-edit fa-fw"></span> Edit</button>
                                    <button class="dropdown-item bg-danger" type="button" onclick="if (confirm('Are you sure you want to delete?')) { Skd.PageLoading('Deleting task...'); location.href = '/Work/ActionDelete?workId=@row.workId&taskId=@row.taskId'; }"><span class="fas @Skd.Web.Icon.Delete fa-fw"></span>Delete</button>
                                </div>
                                <div class="col-6">
                                    @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId > 100 && x.typeId < 199))
                                    {
                                        <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@row.workId&sortOrder=@(row.sortOrder + 1)&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                                    }
                                </div>
                            </div>
                            <div><hr class="dropdown-divider"></div>
                            <div class="d-flex flex-row">
                                <div class="col-6">
                                    @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId >= 300 && x.typeId <= 399))
                                    {
                                        <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@row.workId&sortOrder=@(row.sortOrder + 1)&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                                    }
                                    <div><hr class="dropdown-divider"></div>
                                    @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId >= 400 && x.typeId <= 499))
                                    {
                                        <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@row.workId&sortOrder=@(row.sortOrder + 1)&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                                    }
                                </div>
                                <div class="col-6">
                                    @foreach (var type in Common.WorkTaskTypes.Where(x => x.typeId >= 200 && x.typeId <= 299))
                                    {
                                        <button class="dropdown-item" type="button" skd-sidebar-url="/Work/TaskEdit/?workId=@row.workId&sortOrder=@(row.sortOrder + 1)&typeId=@type.typeId"><span class="fas @type.icon fa-fw"></span> @type.internalTitle</button>
                                        if (type.typeId == (int)WorkTaskTypeEnum.ConnectTrailer)
                                        {
                                            <div><hr class="dropdown-divider"></div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="d-flex w-100 align-self-baseline order-2 mt-2 order-sm-3 mt-sm-0 ps-sm-2">
                <div class="col title">
                    @{
                        if (row.typeId == (int)WorkTaskTypeEnum.Arrivial)
                        {
                            if (string.IsNullOrEmpty(row.addressText))
                            {
                                add = "* MISSING ADDRESS *";
                                <span class="address"><span class="fas fa-exclamation-triangle text-danger"></span> * MISSING ADDRESS *</span>
                            }
                            else
                            {
                                if (int.TryParse(row.addressText, out int addressId))
                                {
                                    var tmpAddress = Common.WorkAddresses.Single(x => x.addressId == addressId);
                                    <span class="address">@@ <a href="https://www.google.com/maps/search/?api=1&query=@tmpAddress.gpsAddress" target="_drive">@tmpAddress.Address()</a> <span class="fas fa-home"></span></span>
                                    if (!string.IsNullOrEmpty(tmpAddress.systemRemark))
                                    {
                                        <div><span class="fas fa-comment-slash"></span> @Html.Raw(tmpAddress.systemRemark)</div>
                                    }
                                    if (!string.IsNullOrEmpty(tmpAddress.locationCode))
                                    {
                                        <div><span class="fas fa-key"></span> @Html.Raw(tmpAddress.locationCode)</div>
                                    }
                                }
                                else
                                {
                                    <span class="address">
                                        @@ <a href="https://www.google.com/maps/search/?api=1&query=@row.addressText" target="_drive">@row.addressText.Trim()</a>
                                        <span class="fa-stack">
                                            <i class="fas fa-home fa-stack-1x"></i>
                                            <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                        </span>
                                    </span>
                                }
                            }
                        }
                        else if (row.typeId == (int)WorkTaskTypeEnum.Departure)
                        {
                            if (int.TryParse(add, out int addressId))
                            {
                                var tmpAddress = Common.WorkAddresses.Single(x => x.addressId == addressId);
                                <span class="address">@@ <a href="https://www.google.com/maps/search/?api=1&query=@tmpAddress.gpsAddress" target="_drive">@tmpAddress.Address()</a> <span class="fas fa-home"></span></span>
                                if (!string.IsNullOrEmpty(tmpAddress.systemRemark))
                                {
                                    <div><span class="fas fa-comment-slash"></span> @Html.Raw(tmpAddress.systemRemark)</div>
                                }
                                if (!string.IsNullOrEmpty(tmpAddress.locationCode))
                                {
                                    <div><span class="fas fa-key"></span> @Html.Raw(tmpAddress.locationCode)</div>
                                }
                            }
                            else
                            {
                                if (string.IsNullOrEmpty(add))
                                {
                                    <span class="address"><span class="fas fa-exclamation-triangle text-danger"></span> * ADDRESS MISSING *</span>
                                }
                                else
                                {
                                    <span class="address">
                                        @@ <a href="https://www.google.com/maps/search/?api=1&query=@add" target="_drive">@add.Trim()</a>
                                        <span class="fa-stack">
                                            <i class="fas fa-home fa-stack-1x"></i>
                                            <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                        </span>
                                    </span>
                                }
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.PickupSemi, (int)WorkTaskTypeEnum.PickupTruck }.Contains(row.typeId))
                        {
                            if (!string.IsNullOrEmpty(row.vehicleNumberplate))
                            {
                                if (int.TryParse(row.vehicleNumberplate, out int id))
                                {
                                    <span class="vehicle">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate7()</span>
                                }
                                else
                                {
                                    <span class="vehicle">@row.vehicleNumberplate</span>
                                    <span class="fa-stack">
                                        <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                        <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                    </span>
                                }
                            }
                            else
                            {
                                <span class="vehicle"><span class="fas fa-exclamation-triangle text-danger"></span> * MISSING NUMBERPLATE *</span>
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.PickupLink }.Contains(row.typeId))
                        {
                            if (!string.IsNullOrEmpty(row.linkNumberplate))
                            {
                                if (int.TryParse(row.linkNumberplate, out int id))
                                {
                                    <span class="link">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate6()</span>
                                }
                                else
                                {
                                    <span class="link">@row.linkNumberplate</span>
                                    <span class="fa-stack">
                                        <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                        <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                    </span>
                                }
                            }
                            else
                            {
                                <span class="link"><span class="fas fa-exclamation-triangle text-danger"></span> * MISSING NUMBERPLATE *</span>
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.PickupDolly }.Contains(row.typeId))
                        {
                            if (!string.IsNullOrEmpty(row.dollyNumberplate))
                            {
                                if (int.TryParse(row.dollyNumberplate, out int id))
                                {
                                    <span class="dolly">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate6()</span>
                                }
                                else
                                {
                                    <span class="dolly">@row.dollyNumberplate</span>
                                    <span class="fa-stack">
                                        <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                        <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                    </span>
                                }
                            }
                            else
                            {
                                <span class="dolly"><span class="fas fa-exclamation-triangle text-danger"></span> * MISSING NUMBERPLATE *</span>
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.PickupTrailer }.Contains(row.typeId))
                        {
                            if (!string.IsNullOrEmpty(row.trailerNumberplate))
                            {
                                if (int.TryParse(row.trailerNumberplate, out int id))
                                {
                                    <span class="trailer">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate6()</span>
                                }
                                else
                                {
                                    <span class="trailer">@row.trailerNumberplate</span>
                                    <span class="fa-stack">
                                        <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                        <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                    </span>
                                }
                            }
                            else
                            {
                                <span class="trailer"><span class="fas fa-exclamation-triangle text-danger"></span> * MISSING NUMBERPLATE *</span>
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.ParkSemi, (int)WorkTaskTypeEnum.ParkTruck }.Contains(row.typeId))
                        {
                            if (int.TryParse(plate1, out int id))
                            {
                                <span class="vehicle">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate7()</span>
                            }
                            else
                            {
                                <span class="vehicle">@row.vehicleNumberplate</span>
                                <span class="fa-stack">
                                    <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                    <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                </span>
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.ParkLink }.Contains(row.typeId))
                        {
                            if (int.TryParse(plate2, out int id))
                            {
                                <span class="link">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate6()</span>
                            }
                            else
                            {
                                <span class="link">@plate2</span>
                                <span class="fa-stack">
                                    <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                    <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                </span>
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.ParkDolly }.Contains(row.typeId))
                        {
                            if (int.TryParse(plate3, out int id))
                            {
                                <span class="dolly">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate6()</span>
                            }
                            else
                            {
                                <span class="dolly">@plate3</span>
                                <span class="fa-stack">
                                    <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                    <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                </span>
                            }
                        }
                        else if (new[] { (int)WorkTaskTypeEnum.ParkTrailer, (int)WorkTaskTypeEnum.ConnectTrailer, (int)WorkTaskTypeEnum.DisconnectTrailer }.Contains(row.typeId))
                        {
                            if (int.TryParse(plate4, out int id))
                            {
                                <span class="trailer">@Common.WorkVehicles.Single(x => x.vehicleId == id).numberplate.Numberplate6()</span>
                            }
                            else
                            {
                                <span class="trailer">@plate4</span>
                                <span class="fa-stack">
                                    <i class="fas @row.WorkTaskType.IconNoFormat() fa-stack-1x"></i>
                                    <i class="fas fa-ban fa-stack-2x" style="color:Tomato"></i>
                                </span>
                            }
                        }
                        else if (row.typeId == (int)WorkTaskTypeEnum.Note)
                        {
                            <span class="fas fa-comment"></span> @row.remark
                        }
                        if (row.typeId != (int)WorkTaskTypeEnum.Note)
                        {
                            if (!string.IsNullOrEmpty(row.remark))
                            {
                                <span class="d-none d-sm-block">
                                    <span class="fas fa-comment"></span> @row.remark
                                </span>
                            }
                            if (!string.IsNullOrEmpty(row.systemRemark))
                            {
                                <span class="d-none d-sm-block">
                                    <span class="fas fa-comment-slash"></span> @Html.Raw(row.systemRemark)
                                </span>
                            }
                        }
                    }
                </div>
            </div>
            @if (!string.IsNullOrEmpty(row.WorkTaskType.btnStartText) || !string.IsNullOrEmpty(row.WorkTaskType.btnEndText))
            {
                <div class="d-flex d-sm-block w-100 align-self-baseline flex-row btn-buttons order-3 mt-2 order-sm-1 mt-sm-0">
                    <div class="col btn-group w-100 px-0 ps-sm-0">
                        @if (!string.IsNullOrEmpty(row.WorkTaskType.btnStartText))
                        {
                            <button class="btn btn-sm btn-success w-100 text-nowrap text-truncate btn-start" skd-cmd="start" data-value="@row.startDateTime" title="@btnStartText">@btnStartText</button>
                        }
                        @if (!string.IsNullOrEmpty(row.WorkTaskType.btnEndText))
                        {
                            <button class="btn btn-sm btn-danger w-100 text-nowrap text-truncate btn-end" skd-cmd="end" @(!row.startDateTime.HasValue && !string.IsNullOrEmpty(row.WorkTaskType.btnStartText) ? "disabled" : "") data-value="@row.endDateTime" title="@btnEndText">@btnEndText</button>
                        }
                    </div>
                </div>
                if (!string.IsNullOrEmpty(row.remark))
                {
                    <div class="d-flex d-sm-none w-100 align-self-baseline order-4">
                        <div class="col remark">
                            <span class="fas fa-comment"></span> @row.remark
                        </div>
                    </div>
                }
                if (!string.IsNullOrEmpty(row.systemRemark))
                {
                    <div class="d-flex d-sm-none w-100 align-self-baseline order-5">
                        <div class="col system-remark">
                            <span class="fas fa-comment-slash"></span> @Html.Raw(row.systemRemark)
                        </div>
                    </div>
                }
            }
        </div>

        switch (row.typeId)
        {
            case (int)WorkTaskTypeEnum.Arrivial:
                add = row.addressText;
                break;
            case (int)WorkTaskTypeEnum.Departure:
                add = "";
                break;
            case (int)WorkTaskTypeEnum.PickupSemi:
                plate1 = row.vehicleNumberplate;
                if (!string.IsNullOrEmpty(row.addressText))
                {
                    add = row.addressText;
                }
                break;
            case (int)WorkTaskTypeEnum.PickupLink:
                plate2 = row.linkNumberplate;
                break;
            case (int)WorkTaskTypeEnum.PickupDolly:
                plate3 = row.dollyNumberplate;
                break;
            case (int)WorkTaskTypeEnum.PickupTrailer:
                plate4 = row.trailerNumberplate;
                break;
            case (int)WorkTaskTypeEnum.ParkSemi:
                plate1 = "";
                break;
            case (int)WorkTaskTypeEnum.ParkLink:
                plate2 = "";
                break;
            case (int)WorkTaskTypeEnum.ParkDolly:
                plate3 = "";
                break;
            case (int)WorkTaskTypeEnum.ParkTrailer:
                plate4 = "";
                break;
        }
    }
</div>
<form id="formDrive" action="/Work/DriveCmd" method="post" novalidate>
    <input type="hidden" name="workId" value="@Model.workId" />
    <input type="hidden" id="taskId" name="taskId" value="" />
    <input type="hidden" id="cmd" name="cmd" value="" />
    <input type="hidden" id="entry" name="entry" value="" />
</form>
@section scripts {
    <script>
        $(function (e) {
            $("section").removeClass("p-1 p-lg-3");

            window.location.hash = '@curTaskId';
            window.addEventListener("resize", function () {
                window.location.hash = '';
                window.location.hash = '@curTaskId';
            });

            $(".task [skd-cmd='add-before'], [skd-cmd='add-after']").on("click", function (e) {
                let task = $(this).closest(".task");
                let taskId = task.attr("id");
                let sortOrder = Number(task.attr("data-sort-order")) + ($(this).attr("skd-cmd") == "add-before" ? -1 : 1);
                let typeId = Number(task.attr("data-type-id"));
                console.log(taskId + ": " + typeId + " (" + sortOrder + ")");

                e.preventDefault();
                e.stopPropagation();
                return false;
            });

           $(".task [skd-cmd]").on("click", function (e) {
                let cmd = $(this).attr("skd-cmd");
                let taskId = $(this).closest(".task").attr("id");
                let typeId = Number($(this).closest(".task").attr("data-type-id"));
                let sortOrder = Number($(this).closest(".task").attr("data-sort-order"));
                let value = $(this).attr("data-value");
                console.log(cmd + ": " + taskId + " = #" + value + "#, typeId: #" + typeId + "#", " sortOrder: #" + sortOrder + "#");

                if (cmd == "delete") {

                } else {
                    if (value == "") {
                        $("#formDrive #taskId").val(taskId);
                        $("#formDrive #cmd").val(cmd);

                        Skd.PageLoading("Setting time", 0);
                        $("#formDrive").submit();
                    } else {
                        let url = "/Work/TaskEdit/" + taskId + "?workId=@Model.workId&sortOrder=" + (sortOrder + 1) + "&typeId=" + typeId;
                        skd_sidebar_load_content(url, "");
                    }
                }
            });

            $("link[rel=icon]").attr("href", "/Content/Images/driver.ico");

            Skd.Form.Init(true);
        });

        function addDaily(typeId, optionId, remark, extra, title) {
            $("#dailyCancel .daily-cancel button").off("click").on("click", function (e) {
                window.clearInterval(cancelInterval);
                $("#dailyCancel").hide();
            });
            $("#dailyCancel .daily-text").html(title);
            $("#dailyCancel").show();
            let cancelWidth = 0;
            var cancelInterval = window.setInterval(function (e) {
                if (cancelWidth == 101) {
                    window.clearInterval(cancelInterval);
                    $("#dailyCancel").hide();
                    //return;

                    Skd.PageLoading('Adding ' + title, 0);
                    let url = "/Daily/Daily_AddEdit?typeId=" + typeId + "&optionId=" + optionId + "&remark=" + remark + "&extraValues=" + extra + "&&rUrl=void";
                    $.post(url, function (data) {
                        Skd.PageLoadingHide();

                        let msgId = Skd.Message.Add(title + " were added", "success");
                        Skd.Message.Show();
                        Skd.Message.Delete(msgId);
                    });
                }
                $("#dailyCancel .daily-cancel :first-child").css("width", cancelWidth + "%");
                $("#dailyCancel .daily-cancel :last-child").css("width", (100 - cancelWidth) + "%");
                cancelWidth += 1;
                if (cancelWidth == 50) {
                    $("#dailyCancel .daily-cancel :first-child").text("Cancel");
                    $("#dailyCancel .daily-cancel :last-child").text(" ");
                }
            }, 25)
        }

        function addEvent(typeId, givenSortOrder) {
            let sortOrder = -1;
            if (!givenSortOrder) {
                sortOrder = Number($("#driveTable .active").attr("data-sort-order")) -1;
            } else {
                sortOrder = givenSortOrder;
            }

            Skd.PageLoading('Adding driving event', 0);
            let url = "/Work/ActionCreateUpdate?workId=@Model.workId&typeId=" + typeId + "&sortOrder=" + sortOrder + "&startDateTime=@DateTime.Now.ToYMDHM()";
            location.href = url;
        }
    </script>
}
@section styles {
    <style>
        section {
            padding: 0 0 128px 0 !important;
        }

        left, header, footer {
            display: none !important;
        }

        .btn-buttons {
            min-width: 300px;
        }

        .btn-start, .btn-end {
            min-width: 150px;
        }

        #topRow > div {
            margin-top: 0;
        }

            #topRow > div.col {
                margin: 0 .25rem;
            }

        #topRow #btnToggleFade_btn {
            min-width: auto !important;
        }

        #bottomRow button {
            font-size: 2rem;
        }

            #bottomRow button .fas {
                min-width: 40px;
            }

        #driveTable .active {
        }

            #driveTable .active .dropdown-toggle, #driveTable .active .title, #driveTable .active .btn-start, #driveTable .active .btn-end {
                font-size: 1.5rem;
            }

        #driveTable .inactive {
            opacity: 0.3;
            transition: opacity ease-in-out 2s;
        }

        #driveTable[data-type-id="491"] .order-1 {
            padding-left: 0;
        }

        .action-status {
            background-color: var(--bs-light);
            color: var(--bs-dark);
            font-family: monospace;
        }

            .action-status img {
                width: 20px;
                height: 14px;
            }

        section .dropdown-menu {
            min-width: 95vw;
            width: 100%;
        }

            section .dropdown-menu .dropdown-item {
                padding: .25rem;
                overflow: hidden;
                text-overflow: ellipsis;
                white-space: nowrap;
            }

            section .dropdown-menu button {
                border-radius: 0;
                padding-right: 0;
            }

            section .dropdown-menu .col-6 {
                padding-right: 0;
            }

            section .dropdown-menu .dropdown-divider {
                margin: .25rem 0;
                opacity: 1;
            }

        section .dropdown-toggle {
            min-width: 180px;
        }

            section .dropdown-toggle.show::after {
                transform: rotate(180deg);
            }

        #dailyCancel {
            position: fixed;
            top: 0;
            left: 0;
            width: 90vw;
            height: calc(100% - 16rem);
            padding: 5vw;
            margin-top: 5rem;
            margin-left: 5vw;
            margin-right: 5vw;
            font-size: 3rem;
            background: var(--bs-warning);
            color: var(--bs-dark);
        }


            #dailyCancel .daily-cancel button {
                height: 50vh;
                font-size: 3rem;
            }

        #bottomRow .bottom-action {
        }

        @@media only screen and (min-width: 576px) {
            section {
                padding: 0 0 66px 0 !important;
            }

            [data-sort-order] {
                flex-direction: row !important;
            }

                [data-sort-order] .order-1 {
                    width: auto !important;
                }

                [data-sort-order] .order-3 {
                    max-width: 300px;
                }

            #driveTable .dropdown-menu {
                min-width: 500px;
            }

            #bottomRow .bottom-action {
            }
        }
    </style>
}
<div id="dailyCancel" style="display: none">
    <div class="daily-text"></div>
    <div class="btn-group w-100 daily-cancel">
        <button class="btn btn-sm btn-danger text-nowrap p-0" style="overflow: hidden;">&nbsp;</button>
        <button class="btn btn-sm btn-success text-nowrap p-0" style="overflow: hidden;">Cancel</button>
    </div>
</div>