@using System.Dynamic;
@{
    Layout = "~/Views/Shared/_Layout_Empty.cshtml";
    ViewBag.Title = "Daily Fast #2";
    ViewBag.Icon = "seedling";

    List<DailyType> dailyTypes = new List<DailyType>();
    using (var ctx = new Db())
    {
        int[] types = new[] { 9503, 1500, 2000, 9007, 9507 };
        dailyTypes = ctx.DailyType
            .Include("DailyTypeOption")
            .Where(x => types.Contains(x.typeId))
            .OrderBy(x => x.internalTitle)
            //.ThenBy(x => x.DailyTypeOption.OrderBy(y => y.sortOrder))
            .ToList();
    }
}
<input type="hidden" id="typeId" name="typeId" />
<input type="hidden" id="optionId" name="optionId" />
<input type="hidden" id="rUrl" name="rUrl" value="/Daily/Fast2" />
<div id="optionButtons" class="d-flex flex-row flex-wrap justify-content-evenly mt-1">
    @foreach (var option in dailyTypes)
    {
        <div class="btn-action input-group">
            <button id="dt_@option.typeId" class="btn btn-warning">
                <span class="fas fa-bolt"></span>
                @option.internalTitle
            </button>
            @if (option.defaultOptionId.HasValue)
            {
                <button id="dt_@Html.Raw(option.typeId.ToString() + "_option")" class="btn btn-danger">
                    <span class="fas fa-cog"></span>
                </button>
            }
        </div>
    }
</div>
@Form.Controls.TextBox(new Form.TextBox()
{
    Id = "remark",
    Title = "Remark",
    Required = false
})
@Form.Controls.DateTime(new Form.DateTime()
{
    Id = "registerDateTime",
    Title = "Register Date/Time",
    LabelText = "Register Date/Time",
    Required = false,
    Value = DateTime.Now
})
@section scripts {
    <script>
        $(function () {
            pageForm.attr("action", "/Daily/Daily_AddEdit");
            $(".dropdown-menu li:nth-child(1)").addClass("text-bg-success");

            $("#remark").on("keyup", function (e) {
                pageForm.validate();
            });

            $(".btn-action button").on("click tap", function (e) {
                e.preventDefault();

                $("#typeId").val($(this).attr("id").split("_")[1]);
                $("#optionId").val($(this).attr("id").split("_")[2]);
                $("#remark").attr("required", $(this).hasAttr("required"));
                if ($(this).hasAttr("required")) {
                } else {
                    $("#remark").removeClass("is-invalid");
                }

                pageForm.validate();
                pageForm.submit();
            });
            pageForm.submit(function (e) {
                if (pageForm.valid()) {
                    if (skd_debug) {
                        skd_form_debug(pageForm);
                    } else {
                        Skd.PageLoading("Adding Entry...", 0);
                        return true;
                    }
                } else {
                    $("#typeId, #optionId").val("");
                }

                return false;
            });
            Skd.SetEvents();
        });
    </script>
}
@section styles {
    <style>
        :root {
            --button-spacing: .25rem;
        }

        .skd-form-row .col {
            width: calc(100% - 1rem) !important;
        }

        .skd-form-row label, .skd-form-row .form-control, .skd-form-row .button, .skd-form-row .fas {
            font-size: 2rem;
        }

        #optionButtons, #optionButtonsBelow {
            justify-content: space-evenly;
            align-items: stretch;
            align-content: stretch;
        }

        .btn-action {
            flex-grow: 1;
            /*margin: 0 .25rem 0 .25rem;
            min-width: 200px;*/
        }

            .btn-action button {
                margin-bottom: .5rem;
                width: 100%;
                min-width: 100%;
            }

                .btn-action button .fas {
                    font-size: 4rem;
                }

                .btn-action button .optionExtraIcons .fas {
                    font-size: 2rem;
                }

        /* dummy */
        #registerDateTime_container {
            margin-top: .5rem;
        }
    </style>
}
@functions {
    static int counter = 0;
    public static ExpandoObject AddOptionToShow(int typeId, int? optionId, string reqRemarkPlaceholder = "", bool requireExtraInfo = false, string icon = "fas fa-whatsapp", bool showBelow = false)
    {
        dynamic rtn;
        rtn = new ExpandoObject();

        rtn.TypeId = typeId;
        rtn.OptionId = optionId;
        rtn.Icon = icon;
        rtn.IsRequired = !string.IsNullOrWhiteSpace(reqRemarkPlaceholder);
        rtn.RemarkPlaceholderText = "";
        rtn.RequireExtraInfo = requireExtraInfo;
        if (rtn.IsRequired)
        {
            rtn.RemarkPlaceholderText = reqRemarkPlaceholder;
        }
        rtn.SortOrder = counter++;
        rtn.ShowBelow = showBelow;

        return rtn;
    }
}