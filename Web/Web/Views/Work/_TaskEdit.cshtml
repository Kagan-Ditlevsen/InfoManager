@model WorkTask
@{
    Layout = "~/Views/Shared/_Layout_SkdSidebar.cshtml";
    if (Model.taskId != Guid.Empty)
    {
        ViewBag.Title = "Update Driving Task: " + Model.WorkTaskType.internalTitle;
    }
    else
    {
        ViewBag.Title = "Add new Driving Task: " + Model.WorkTaskType.internalTitle;
    }
    ViewBag.Icon = "road";
    string focusId = "remark";

    var vehicleList = new List<DbDropdown>();
    foreach (var v in Common.WorkVehicles.Where(x => !x.isArchived))
    {
        var d = new DbDropdown()
        {
            Value = v.vehicleId,
            Title = v.numberplate,
            GroupId = v.typeId.ToString(),
            GroupTitle = v.WorkVehicleType.internalTitle
        };
        if (!string.IsNullOrEmpty(v.lastLocation))
        {
            string addr = v.lastLocation;
            if (int.TryParse(v.lastLocation, out int addressId))
            {
                addr = Common.WorkAddresses.Single(x => x.addressId == addressId).Address();
            }

            d.Title += " [" + addr + "]";
        }
        vehicleList.Add(d);
    }

    var buildDropdown = new Form.Dropdown() { Required = true, SelectOnly = false };
    bool buildHtml = false;
    if (new int[] { (int)WorkTaskTypeEnum.Arrivial }.Contains(Model.typeId))
    {
        focusId = "addressText";
        var addressList = (from x in (from x in Common.WorkAddresses
                                      orderby x.Address()
                                      select x).ToList()
                           select new DbDropdown(x.addressId, x.Address())).ToList();
        buildHtml = true;
        if (!string.IsNullOrEmpty(Model.addressText) && !int.TryParse(Model.addressText, out int dummy1))
        {
            addressList.Add(new DbDropdown()
            {
                Title = Model.addressText,
                Value = "-1"
            });
            Model.addressText = "-1";
            addressList = addressList.OrderBy(x => int.Parse(x.Value.ToString())).ToList();
        }
        buildDropdown.Id = "addressText";
        buildDropdown.Title = "Address";
        buildDropdown.Value = Model.addressText;
        buildDropdown.DataList = addressList;
        buildDropdown.HelpText = "-- choose address --";
    }

    if (new int[] { (int)WorkTaskTypeEnum.PickupSemi }.Contains(Model.typeId))
    {
        focusId = "vehicleNumberplate";
        vehicleList = vehicleList.Where(x => int.Parse(x.GroupId) == (int)WorkVehicleTypeEnum.Semi).ToList();
        buildHtml = true;
        if (!string.IsNullOrEmpty(Model.vehicleNumberplate) && !int.TryParse(Model.vehicleNumberplate, out int dummyA))
        {
            vehicleList.Add(new DbDropdown()
            {
                Title = Model.vehicleNumberplate,
                Value = "-1"
            });
            Model.vehicleNumberplate = "-1";
            vehicleList = vehicleList.OrderBy(x => int.Parse(x.Value.ToString())).ToList();
        }
        buildDropdown.Id = "vehicleNumberplate";
        buildDropdown.Title = "Vehicle";
        buildDropdown.Value = Model.vehicleNumberplate;
        buildDropdown.DataList = vehicleList;
        buildDropdown.HelpText = "-- choose vehicle --";
    }

    if (new int[] { (int)WorkTaskTypeEnum.PickupLink }.Contains(Model.typeId))
    {
        focusId = "linkNumberplate";
        vehicleList = vehicleList.Where(x => int.Parse(x.GroupId) == (int)WorkVehicleTypeEnum.Link).ToList();
        buildHtml = true;
        if (!string.IsNullOrEmpty(Model.linkNumberplate) && !int.TryParse(Model.linkNumberplate, out int dummyA))
        {
            vehicleList.Add(new DbDropdown()
            {
                Title = Model.linkNumberplate,
                Value = "-1"
            });
            Model.linkNumberplate = "-1";
            vehicleList = vehicleList.OrderBy(x => int.Parse(x.Value.ToString())).ToList();
        }
        buildDropdown.Id = "linkNumberplate";
        buildDropdown.Title = "Link";
        buildDropdown.Value = Model.linkNumberplate;
        buildDropdown.DataList = vehicleList;
        buildDropdown.HelpText = "-- choose link --";
    }

    if (new int[] { (int)WorkTaskTypeEnum.PickupTrailer }.Contains(Model.typeId))
    {
        focusId = "trailerNumberplate";
        vehicleList = vehicleList.Where(x => int.Parse(x.GroupId) == (int)WorkVehicleTypeEnum.Trailer).ToList();
        buildHtml = true;
        if (!string.IsNullOrEmpty(Model.trailerNumberplate) && !int.TryParse(Model.trailerNumberplate, out int dummyA))
        {
            vehicleList.Add(new DbDropdown()
            {
                Title = Model.trailerNumberplate,
                Value = "-1"
            });
            Model.trailerNumberplate = "-1";
            vehicleList = vehicleList.OrderBy(x => int.Parse(x.Value.ToString())).ToList();
        }
        buildDropdown.Id = "trailerNumberplate";
        buildDropdown.Title = "Trailer";
        buildDropdown.Value = Model.trailerNumberplate;
        buildDropdown.DataList = vehicleList;
        buildDropdown.HelpText = "-- choose trailer --";
    }
}
<script src="~/Scripts/additional-methods.js"></script>
<div class="d-flex">
    <div class="col-12 col-lg-12 skd-content-loader-show" id="sidebarContent">
        <img class="skd-content-loader" src="~/Content/Images/loader-circle.gif" />
        <form id="sidebarForm" action="/Work/ActionCreateUpdate" novalidate="novalidate" method="post">
            <input type="hidden" name="workId" value="@Model.workId" />
            <input type="hidden" name="taskId" value="@Model.taskId" />
            <input type="hidden" name="typeId" value="@Model.typeId" />
            <input type="hidden" name="sortOrder" value="@Model.sortOrder" />
            @Form.Controls.DateTime(new Form.DateTime() { Id = "startDateTime", Title = "Start Date/Time", Value = Model.startDateTime, Visible = !string.IsNullOrEmpty(Model.WorkTaskType.btnStartText) })
            @Form.Controls.DateTime(new Form.DateTime() { Id = "endDateTime", Title = "End Date/Time", Value = Model.endDateTime, Visible = !string.IsNullOrEmpty(Model.WorkTaskType.btnEndText) })
            @if (buildHtml)
            {
                @Form.Controls.Dropdown(buildDropdown)
            }
            @if (!string.IsNullOrEmpty(Model.systemRemark))
            {
                <div id="systemRemark_container" class="skd-form-row">
                    <div class="col-4">System Remark</div>
                    <div class="col px-0">@Html.Raw(Model.systemRemark)</div>
                </div>
            }
            @Form.Controls.TextBox(new Form.TextBox() { Id = "remark", Title = "Remark", Value = Model.remark })
            <div id="footer_container" class="skd-form-row" control-type="form-submit">
                @Form.Controls.ButtonSubmit(new Form.ButtonSubmit() { Id = "btnSubmit", Title = (Model.taskId == Guid.Empty ? "Add Task" : "Update Task"), ControllerClass = "w-100" })
            </div>
            @Form.Controls.Text(new Form.Text() { Id = "reportColumnNumber", Title = "Report Column", ReadOnly = false, Value = Model.reportColumnNumber, InputMode = Form.TextInputMode.Numeric, InputType = Form.TextInputType.Number })
        </form>
    </div>
</div>
@section scripts {
    <script>
        $(function (e) {
            var sidebarForm = $("#sidebarForm");
            sidebarForm.on("submit", function (e) {
                //e.preventDefault();
                //e.stopPropagation();
                //return;
                if ($("#startDateTime_container").hasClass("d-none")) {
                    $("#startDateTime").attr("disabled", true);
                }
                if ($("#endDateTime_container").hasClass("d-none")) {
                    $("#endDateTime").attr("disabled", true);
                }

                Skd.ContentLoading($("#sidebarContent"));
                $("#addressText, #vehicleNumberplate, #linkNumberplate, #trailerNumberplate").attr("readonly", true);
            });
            $("#addressText, #vehicleNumberplate, #linkNumberplate, #trailerNumberplate").on("change", function (e) {
                skd_form_valid(sidebarForm);
            });

            skd_form_valid(sidebarForm);
            $("#@focusId").focus();
            Skd.ContentLoadingHide();
        });
    </script>
}
@section styles {
    <style>
        div.skd-form-row + div.skd-form-row {
            margin-top: .25rem;
        }

        @@media only screen and (max-width: 576px) {
            .skd-form-row label {
                width: calc(100% - .75rem);
                margin-left: .5rem;
                padding-bottom: .25rem;
            }
        }

        #vehicleList .d-flex:hover {
            cursor: pointer;
        }

        #sidebarForm, .skd-sidebar-title {
            color: var(--bs-white);
        }
    </style>
}